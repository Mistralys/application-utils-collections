<?php
/**
 * @package App Utils
 * @subpackage Collections
 */

declare(strict_types=1);

namespace AppUtils\Baskets;

use AppUtils\Interfaces\CollectionRecordInterface;
use AppUtils\Interfaces\IntegerPrimaryRecordInterface;

/**
 * Trait that can be used to implement a basket of integer-primary
 * items, without extending the {@see BaseIntegerPrimaryCollection} class - for
 * example, if the class already extends another class.
 *
 * ## Usage
 *
 * 1. Add the interface {@see IntegerPrimaryBasketInterface} to your class.
 * 2. Use the base trait {@see BasketTrait} in your class.
 * 3. Use this trait in your class.
 * 4. See the next section if your class already has a constructor.
 *
 * ## Existing constructors
 *
 * The trait comes with a constructor that can be used to
 * add any initial items to the collection. If your class
 * already has a constructor, the trait's constructor will
 * be overwritten. In this case, you can call {@see self::importInitialItems()}
 * to add the initial items, if any.
 *
 * @package App Utils
 * @subpackage Collections
 * @phpstan-import-type AnyCollectionRecord from BasketInterface
 * @auto-generated This trait was generated by the {@see \AppUtils\Collections\Build\TraitBuilder::build()} command @2025-07-25 10:35:41
 */
trait IntegerPrimaryBasketTrait
{
    protected function tryRegisterItem(CollectionRecordInterface $item) : bool
    {
        // Overridden to verify if the item is of one of the allowed types
        foreach($this->getAllowedItemClasses() as $class) {
            if($item instanceof $class) {
                return parent::tryRegisterItem($item);
            }
        }

        return false;
    }

    protected function importInitialItem(CollectionRecordInterface $subject) : void
    {
        if($subject instanceof IntegerPrimaryRecordInterface) {
            $this->initialItems[] = $subject;
        }
    }

    /**
     * @param array<int|string,CollectionRecordInterface|mixed> $items
     * @return array<int,IntegerPrimaryRecordInterface>
     */
    protected function filterItems(array $items) : array
    {
        $result = array();

        foreach($items as $item) {
            if($item instanceof IntegerPrimaryRecordInterface) {
                $result[$item->getID()] = $item;
            }
        }

        return $result;
    }

    public function addItems(array $items): self
    {
        $items = $this->filterItems($items);
        $added = array();

        if($this->isInitialized())
        {
            foreach($items as $itemID => $item) {
                if(!isset($this->items[$itemID])) {
                    $added[] = $item;
                    $this->registerItem($item);
                }
            }
        }
        else
        {
            foreach($items as $itemID => $item) {
                if(!isset($this->initialItems[$itemID])) {
                    $added[] = $item;
                    $this->initialItems[$itemID] = $item;
                }
            }
        }

        if(!empty($added))
        {
            $this->doSort();

            foreach ($added as $item) {
                $this->triggerItemAdded($item);
            }
        }

        return $this;
    }

    public function removeItem($itemOrID): self
    {
        $item = null;
        $itemID = null;

        if($itemOrID instanceof IntegerPrimaryRecordInterface) {
            $item = $itemOrID;
            $itemID = $item->getID();
        } else if(is_int($itemOrID)) {
            $item = $this->items[$itemOrID] ?? $this->initialItems[$itemOrID] ?? null;
            $itemID = $itemOrID;
        }

        if($item === null || $itemID === null) {
            return $this;
        }

        unset(
            $this->items[$itemID],
            $this->initialItems[$itemID]
        );

        $this->triggerItemRemoved($item);

        return $this;
    }
}
